plugins {
    id 'net.minecraftforge.gradle' version "${forge_gradle_version}"
    id 'org.spongepowered.mixin' version "${mixin_gradle_version}"
    id 'eclipse'
    id 'idea'
    id 'org.parchmentmc.librarian.forgegradle' version "${parchment_gradle_version}"
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'java'
}

version = "${mc_version}-${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
	shade
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformer = 'src/main/resources/META-INF/accesstransformer.cfg'

    runs {
        client {
            taskName "runClient ${mod_name} ${mc_version}"
			arg "-mixin.config=${mod_id}.mixins.json"

			property 'mixin.debug', 'true'

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            taskName "runServer ${mod_name} ${mc_version}"
			arg "-mixin.config=${mod_id}.mixins.json"

			property 'mixin.debug', 'true'

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            taskName "runData ${mod_name} ${mc_version}"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"

    debug.export = true
}

configurations {
    includedDependencies
    implementation.extendsFrom(includedDependencies)

    buildDependencies
}

repositories {
    ivy {
		name "Github Releases" // Github Releases
        url "https://github.com"

        patternLayout {
            artifact "[organisation]/[module]/releases/download/v[revision]/[module]-[revision].[ext]"
        }

        metadataSources { artifact() }
    }

    maven {
		name "Curse Maven" // CurseForge Maven
		url "https://www.cursemaven.com"
    }
    maven { 
		name "Geckolib Maven" // Geckolib
		url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven"
    }
    maven {
		name = "SBL Maven" // SmartBrainLib
		url = "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
    }
    maven {
		name "Progwm16 Maven" // JEI
		url "https://dvs1.progwml6.com/files/maven"
    }
    maven { 
		name "ModMaven" // JEI Alt
		url "https://modmaven.dev"
    }
	
	maven { 
		name "Databuddy" // Databuddy repo
		url "https://cubicinterpolation.net/maven/" 
	}
}

dependencies {
    // Base
    minecraft("net.minecraftforge:forge:${mc_version}-${forge_version}")
    annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")

    // Dependencies (Built-in)
    includedDependencies("meldexun:ReflectionUtil:${reflectionutil_version}@jar")
    includedDependencies("meldexun:RandomUtil:${randomutil_version}@jar")

    // Dependencies (Required)
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${mc_version}:${geckolib_version}")
    implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-1.20:${sbl_version}")
	implementation fg.deobf("dertoaster98:multihitboxlib:${multihitboxlib_version}@jar")

 // implementation fg.deobf("curse.maven:ReachFix-556777:${reachfix_version}")

    // Dependencies (Optional)
//  compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
//  runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

    implementation fg.deobf("curse.maven:the-one-probe-245211:${top_version}")

 // runtimeOnly fg.deobf("curse.maven:WorldEdit-225608:${worldedit_version}")
 
    // Databuddy
	implementation fg.deobf("commoble.databuddy:${databuddy_branch}:${databuddy_version}")
	shade fg.deobf("commoble.databuddy:${databuddy_branch}:${databuddy_version}")
}

shadowJar {
	configurations = [project.configurations.shade]
	relocate 'commoble.databuddy', "${project.group}.shadow.commoble.databuddy"
}

reobf {
    shadowJar { }
}

tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfJar')

jar {
    from {
        configurations.includedDependencies.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes([
            "Specification-Title": "${mod_name}",
            "Specification-Vendor": "${mod_vendor}",
            "Specification-Version": "${mod_version}",
            "Implementation-Title": "${mod_name}",
            "Implementation-Version": "${mod_version}",
            "Implementation-Vendor" :"${mod_vendor}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
	    	"MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}

processResources {
	exclude '**/.cache/'

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

compileJava {
    classpath = sourceSets.main.compileClasspath + configurations.buildDependencies
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}