plugins {
    id 'eclipse'
	id 'idea'
    id 'net.minecraftforge.gradle' version "${forge_gradle_version}"
    id 'org.spongepowered.mixin' version "${mixin_gradle_version}"
    id 'org.parchmentmc.librarian.forgegradle' version "${parchment_gradle_version}"
}

version = "${mc_version}-${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    includedDependencies
    implementation.extendsFrom(includedDependencies)

    buildDependencies
}

repositories {
    // Github Releases
    ivy {
        url 'https://github.com'

        patternLayout {
            artifact '[organisation]/[module]/releases/download/v[revision]/[module]-[revision].[ext]'
        }

        metadataSources { artifact() }
    }

    // GeckoLib
    maven {
		name = "GeckoLib (Glib) Maven Repo" 
		url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven' 
	}


	// SBL
	maven {
		name = "SmartBrainLib (SBL) Maven Repo"
		url = "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
	}
	
    // JEI
    maven {
		// location of the maven that hosts JEI files before January 2023
		name = "Progwml6's maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		// location of the maven that hosts JEI files since January 2023
		name = "Jared's maven"
		url = "https://maven.blamejared.com/"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.dev"
	}

    // CurseForge
    maven { url 'https://www.cursemaven.com' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    includedDependencies "meldexun:ReflectionUtil:${reflectionutil_version}@jar"
    includedDependencies "meldexun:RandomUtil:${randomutil_version}@jar"

    // GeckoLib
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${mc_version}:${geckolib_version}")
    // ReachFix
	// Not on 1.20 yet
    // implementation fg.deobf("curse.maven:ReachFix-556777:${reachfix_version}")
    // SmartBrainLib
    implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-${mc_version}:${smartbrainlib_version}")

    // JEI
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
	compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
	// at runtime, use the full JEI jar for Forge
	runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))
    
	// WorldEdit
    // runtimeOnly fg.deobf("curse.maven:WorldEdit-225608:${worldedit_version}")
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformer = 'src/main/resources/META-INF/accesstransformer.cfg'

    runs {
        client {
            taskName "runClient ${mod_name} ${mc_version}"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            taskName "runServer ${mod_name} ${mc_version}"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            taskName "runData ${mod_name} ${mc_version}"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

jar {
    from {
        configurations.includedDependencies.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes([
            "MixinConfigs": "${mod_id}.mixins.json",

            "Specification-Title": "${mod_name}",
            "Specification-Vendor": "${mod_vendor}",
            "Specification-Version": "${mod_version}",
            "Implementation-Title": "${mod_name}",
            "Implementation-Version": "${mod_version}",
            "Implementation-Vendor" :"${mod_vendor}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

compileJava {
    classpath = sourceSets.main.compileClasspath + configurations.buildDependencies
}

jar.finalizedBy('reobfJar')
